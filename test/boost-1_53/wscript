#!/usr/bin/env python

# Copyright 2013, Sebastian Jeltsch (sjeltsch@kip.uni-heidelberg.de)
# Use, modification and distribution is subject to the Boost Software
# License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

import sys, os
from waflib import Utils

components = ['../..']
recurse    = lambda ctx : map(lambda proj: ctx.recurse(proj), components)

cxxflags = [ '-g', '-O0', ]

def options(opt):
    recurse(opt)
    opt.load('compiler_cxx')
    opt.load('boost')

def configure(cfg):
    recurse(cfg)
    cfg.load('compiler_cxx')
    cfg.load('boost')

    cfg.check_boost(lib='unit_test_framework', uselib_store='BOOST4TEST')

    cfg.check_cxx(lib='dl')

    # use $PWD as default prefix for tests, if no prefix is given explicitly
    cfg.env.PREFIX = cfg.env.PREFIX if os.getenv('PREFIX') else '.'

def build_polymorphic(bld):
    polymorphic_tests = [
            'test_polymorphic.cpp',
            'test_polymorphic2.cpp',
            ]

    archives = {
            'mongo' : 'polymorphic_mongo_archive.hpp',
            'json'  : 'polymorphic_json_archive.hpp',
            }

    for archive, header in archives.iteritems():
        for test in polymorphic_tests:
            bld.program(
                target  = '%s_%s' % (os.path.splitext(test)[0], archive),
                source  = [ test ],
                use = [
                    'BOOST4TEST',
                    'boost_test_common',
                    'boost-mongo',
                    ],
                defines = [ 'BOOST_ARCHIVE_TEST=%s' % header ],
                cxxflags = cxxflags,
                install_path = 'bin')

def build_plain(bld):
    plain_tests = [
            'test_array.cpp',
            'test_binary.cpp',
            'test_bitset.cpp',
            'test_class_info_save.cpp',
            'test_complex.cpp',
            'test_contained_class.cpp',
            'test_delete_pointer.cpp',
            'test_deque.cpp',
            'test_derived.cpp',
            'test_derived_class_ptr.cpp',
            'test_diamond.cpp',
            'test_diamond_complex.cpp',
            'test_list.cpp',
            'test_list_ptrs.cpp',
            'test_map.cpp',
            'test_mi.cpp',
            'test_multiple_inheritance.cpp',
            'test_multiple_ptrs.cpp',
            'test_new_operator.cpp',
            'test_no_rtti.cpp',
            'test_non_intrusive.cpp',
            'test_null_ptr.cpp',
            'test_nvp.cpp',
            'test_object.cpp',
            'test_optional.cpp',
            'test_pimpl.cpp',
            'test_primitive.cpp',
            'test_private_base.cpp',
            'test_recursion.cpp',
            'test_registered.cpp',
            'test_shared_ptr.cpp',
            'test_shared_ptr_132.cpp',
            'test_shared_ptr_multi_base.cpp',
            'test_simple_class.cpp',
            'test_simple_class_ptr.cpp',
            'test_split.cpp',
            'test_tracking.cpp',
            'test_variant.cpp',
            'test_vector.cpp',

            # The following tests are excluded. A meaningful
            # explanation should be provided alongside.

            #'test_dll_exported.cpp'     # overwrites BOOST_ARCHIVE_TEST macro
                                         # to always use text_archive only
                                         #   -> not interesting.

            #'test_not_serializable.cpp' # according to header, compilation is
                                         # supposed to fail.
        ]

    archives = {
            'mongo' : 'mongo_archive.hpp',
            'json'  : 'json_archive.hpp',
            }

    for archive, header in archives.iteritems():
        for test in plain_tests:
            bld.program(
                target  = '%s_%s' % (os.path.splitext(test)[0], archive),
                source  = [ test ],
                use = [
                    'BOOST4TEST',
                    'boost_test_common',
                    'boost-mongo',
                    ],
                defines = [ 'BOOST_ARCHIVE_TEST=%s' % header ],
                cxxflags = cxxflags,
                install_path = 'bin')

def build(bld):
    recurse(bld)

    bld.shlib(
        target = 'boost_test_common',
        source  = [
            'A.cpp',
            'polymorphic_base.cpp',
            'polymorphic_derived2.cpp',
            'polymorphic_derived1.cpp',
            'test_polymorphic_A.cpp',
            'test_polymorphic2imp.cpp',
            ],
        use = [ 'BOOST4MONGO', 'boost-mongo_inc' ],
        cxxflags = cxxflags,
        install_path = 'lib')


    build_plain(bld)
    build_polymorphic(bld)


    # Dynamic Library Plugin Test
    bld.shlib(
        target = 'plugin_polymorphic_derived2',
        source  = [
            'polymorphic_base.cpp',
            'polymorphic_derived2.cpp',
            ],
        use = [ 'BOOST4MONGO', 'DL', 'boost-mongo_inc' ],
        cxxflags = cxxflags + [ '-fPIC' ],
        linkflags = [ '-zdefs' ],
        install_path = 'lib')

    #bld.program(
        #target          = 'test_dll_plugin',
        #source  = [ 'test_dll_plugin.cpp', ],
        #use = [
            #'plugin_polymorphic_derived2',
            #'boost-mongo',
            #'BOOST4TEST',
            #],
        #defines = [ 'BOOST_ARCHIVE_TEST=polymorphic_mongo_archive.hpp' ],
        #cxxflags = cxxflags,
        #install_path = 'bin')

    # install test runner locally
    bld.install_as('bin/run_tests', bld.path.find_node('run_tests.py'), chmod=Utils.O755)
